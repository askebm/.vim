global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet template "Basic template" b
% !TEX program = lualatex
\documentclass[a4paper]{article}

\usepackage[headheight=14pt, top=0.5cm, bottom=0.5cm, left=.5cm, right=.5cm]{geometry}

\usepackage{fontspec}

\usepackage{polyglossia}
\setdefaultlanguage{english}
\usepackage{amsmath, amssymb}
\usepackage{graphicx}

\setlength\parindent{0pt}

\begin{document}
	$0
\end{document}
endsnippet


snippet svg "Svg environment" b
\begin{figure}[${1:htpb}]
	\centering
	\def\svgwidth{${2:0.8}\textwidth}
	\includesvg[${3:./}]{${4:name}}
	\caption{$4}
	\label{fig:$4}
\end{figure}

endsnippet

snippet subf "Start a subfile" b
% !TEX program = lualatex
\documentclass[${1:path}]{subfiles}
\begin{document}
$0
	
\end{document}
endsnippet

snippet todo "Todo for todonotes" b
\todo{$1} $0
endsnippet


snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

priority 1000

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\bar{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 1000
context "math()"
snippet iint "integral" wA
\int_{$1}^{$2}$0
endsnippet

context "math()"
snippet sqr  "sqrt" wA
\sqrt{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 1000
context "math()"
snippet sb "Subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet RR "Real numbers" wA
{\rm I\!R}
endsnippet

context "math()"
snippet inff "infinity" wA
\infty
endsnippet

context "math()"
snippet un "Dobbel undeline"
\underline{\underline{$1}}$0
endsnippet

snippet "notePDF (.*)" "Add pdf pages with text underneith" wr
`!p
import subprocess as sp
cmd = "pdfinfo " + match.group(1) + r" | sed -nE 's/Pages:\s+([0-9]+)/\1/p'"
pages = int(sp.check_output(cmd,shell=True))

for p in range(1,pages+1):
	if(p != 1):
		snip += r"\newpage"
	snip += r"\begin{figure}[h]"
	snip >> 1
	snip += r"\makebox[\textwidth][c]{"
	snip >> 1
	snip += r"\centering"
	snip += r"\includegraphics[page="+str(p)+r",width=\pagewidth]{"+match.group(1)+"}"
	snip << 1
	snip += r"}"
	snip += r"\makebox[\textwidth][c]{"
	snip >> 1
	snip += r"\rule{\pagewidth}{0.01pt}"
	snip << 1
	snip += r"}"
	snip << 1
	snip += r"\end{figure}"
	snip += r""
	snip += r""
	snip += r""
`
endsnippet

snippet mint "minted listing enviroment" b
\begin{minted}{${1:python}}
$2
\end{minted}
$0
endsnippet
	
snippet minti "minted inline" i
\mintinline{${1:bash}}{$2} $0
endsnippet

